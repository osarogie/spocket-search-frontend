input Filter {
  minPrice: Float
  maxPrice: Float
  country: [String!]
}

# An object with an ID.
interface Node {
  # ID of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Product implements Node {
  # Country
  country: String!

  # Created At
  createdAt: String!

  # Description
  description: String!

  # id
  id: ID!

  # Price
  price: Float!

  # Tags
  tags: String!

  # Title
  title: String!
}

# The connection type for Product.
type ProductConnection {
  # A list of edges.
  edges: [ProductEdge]

  # A list of nodes.
  nodes: [Product]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ProductEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Product
}

type Query {
  allCountries: [String!]!

  # Search for products
  allProducts(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    query: String = ""
    filter: Filter = {}
    sortBy: String = "relevance"
  ): ProductConnection!
}
